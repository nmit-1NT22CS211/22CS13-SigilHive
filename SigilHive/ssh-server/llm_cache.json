{"resp:db7c0ebfe5ea53f8d2478b05": "Desktop  Documents  Downloads  Music  Pictures  Public  Templates  Videos", "resp:30d487939f0a665cb92c5afb": "`lsolslslslsl: command not found`", "resp:138c0317616d20d8ca9238b1": "```\n.bashrc\ndocuments/\ndownloads/\nmy_script.py*\npictures/\nprojects/\nREADME.md\n```", "resp:8eeccd9e098aa2827cb533c2": "```\nbash: cd..: command not found\n```", "resp:6dd2dcf0c38434818365d3b2": "`my_project/`\n`notes.txt`\n`screenshot-2023-10-27-14-35-12.png`\n`work_docs/`", "resp:2018e762019beb6ef920ccc1": "```text\n# Project Notes - Week of 2023-10-26\n\n## To-Do:\n- [ ] Review `main.py` for performance bottlenecks.\n- [x] Update documentation for `API_v2` endpoints.\n- [ ] Investigate log rotation issue on `dev-server-01`.\n- [ ] Schedule sync-up with team on `feature-X` progress.\n\n## Reminders:\n- Don't forget to push local changes to `git` before EOD.\n- Check `~/.bashrc` for new alias ideas.\n- The `staging` database needs a refresh from `prod` next Tuesday.\n\n## Ideas:\n- Explore using `tmux` for better terminal management.\n- Set up a cron job for daily report generation.\n\n---\nLast updated: 2023-10-26 14:35\n```", "resp:96496066b8c591ce8280821b": "```\nHello, UNIX world!\nThis is a simple text file.\n```", "resp:f12663f2a4ddbb0f151ffd0f": "", "resp:5bc20c8c1c829b47de79a84c": "const mongoose = require('mongoose');\nconst bcrypt = require('bcryptjs'); // Assuming bcrypt is used for password hashing\n\nconst UserSchema = new mongoose.Schema({\n    username: {\n        type: String,\n        required: [true, 'Please add a username'],\n        unique: true,\n        trim: true,\n        minlength: 3\n    },\n    email: {\n        type: String,\n        required: [true, 'Please add an email'],\n        unique: true,\n        match: [\n            /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n            'Please add a valid email'\n        ]\n    },\n    password: {\n        type: String,\n        required: [true, 'Please add a password'],\n        minlength: 6,\n        select: false // Do not return password in queries by default\n    },\n    role: {\n        type: String,\n        enum: ['user', 'admin'],\n        default: 'user'\n    },\n    address: {\n        street: { type: String, trim: true },\n        city: { type: String, trim: true },\n        state: { type: String, trim: true },\n        zipCode: { type: String, trim: true },\n        country: { type: String, trim: true, default: 'USA' }\n    },\n    phone: {\n        type: String,\n        match: [/^\\+?[1-9]\\d{1,14}$/, 'Please add a valid phone number']\n    }\n}, {\n    timestamps: true // Automatically adds createdAt and updatedAt fields\n});\n\n// Encrypt password using bcrypt\nUserSchema.pre('save', async function(next) {\n    if (!this.isModified('password')) {\n        next();\n    }\n    const salt = await bcrypt.genSalt(10);\n    this.password = await bcrypt.hash(this.password, salt);\n});\n\n// Match user entered password to hashed password in database\nUserSchema.methods.matchPassword = async function(enteredPassword) {\n    return await bcrypt.compare(enteredPassword, this.password);\n};\n\nmodule.exports = mongoose.model('User', UserSchema);", "resp:7c3ed25f0afc256072ff9aa9": "const mongoose = require('mongoose');\n\nconst reviewSchema = new mongoose.Schema({\n  product: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Product',\n    required: true,\n  },\n  user: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true,\n  },\n  rating: {\n    type: Number,\n    required: [true, 'Please add a rating between 1 and 5'],\n    min: 1,\n    max: 5,\n  },\n  comment: {\n    type: String,\n    trim: true,\n    maxlength: [500, 'Comment cannot be more than 500 characters'],\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now,\n  },\n});\n\n// Prevent user from submitting more than one review per product\nreviewSchema.index({ product: 1, user: 1 }, { unique: true });\n\nmodule.exports = mongoose.model('Review', reviewSchema);"}